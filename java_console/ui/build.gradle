import java.nio.file.Files

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

configurations {
    // not sure what is this and why but it's huge
    all*.exclude group: 'com.ibm.icu', module: 'icu4j'
}

dependencies {
    implementation project(':shared_ui')
    implementation project(':autotest')
    implementation project(':luaformatter')
    implementation project(':config_definition')
    implementation global_libs.antlr
    implementation 'com.miglayout:miglayout-swing:4.1'
    implementation files('../lib/dfu/dfu_java.jar')
    implementation files('../lib/SteelSeries-3.9.30.jar')
    implementation files('../lib/trident-6.2.jar')
    implementation files('../lib/dfu/IntelHexParser.jar')

    testImplementation global_libs.mockito
    testImplementation testFixtures(project(':ecu_io'))
}

task copy_c_files {
    def names = []
    java.nio.file.Path dest = java.nio.file.Paths.get("build/classes/c_sources")

    Closure visitor = { FileVisitDetails details ->
        if (details.file.path.endsWith(".cpp")) {
            println details.file.path
            names << details.file.path

            java.nio.file.Path src = java.nio.file.Paths.get(details.file.path)

            Files.copy(src, dest)
        }
    }

    fileTree("../../firmware/controllers/").visit visitor
    fileTree("../../firmware/console/").visit visitor
    println names

    copy {
        into "build/classes/c_sources"
        include "**/../../firmware/controllers/*.*"

        // Flatten the hierarchy by setting the path
        // of all files to their respective basename
        eachFile {
            println path
            path = name
        }

        // Flattening the hierarchy leaves empty directories,
        // do not copy those
        includeEmptyDirs = false
    }

    println fileTree(".").include("**/../*.cpp").files
    copy {
        from fileTree(".").include("**/../../firmware/controllers/*.cpp").files
        into "build/classes/c_sources"
    }
    copy {
        from fileTree("../../firmware").include("**/../../firmware/console/*.cpp").files
        into "build/classes/c_sources"
    }
}

shadowJar {
    archivesBaseName = 'rusefi_console'
    archiveClassifier = ''

    manifest {
        attributes(
                'Main-Class': 'com.rusefi.Launcher'
        )
    }
}